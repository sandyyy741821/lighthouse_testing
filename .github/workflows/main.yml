name: Lighthouse CI with appIsReady Check

on:
  push:
    branches:
      - '**'
  pull_request_target:
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        formfactor:
          - name: laptop
            width: 1080
            height: 1920
            preset: "desktop"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # `fetch-depth: 0` is required for Gitleaks to scan the full history
          fetch-depth: 0

      - name: Scan modified .env files in PR
        run: |
          files=$(git diff --name-only origin/main...HEAD | grep '\.env$' || true)
          if [ -z "$files" ]; then
            echo "No .env files changed in this PR."
            exit 0
          fi
          echo "Scanning modified .env files: $files"
          gitleaks detect --source=. --files-path "$files" --report=gitleaks-report.json

      - name: Upload Gitleaks Report
        if: ${{ always() && steps.scan_modified_env_files.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

      - name: Find project directory with package.json
        id: find_dir
        run: |
          PROJECT_DIR=$(find . -name package.json -exec dirname {} \; | head -n 1)
          echo "PROJECT_DIR=$PROJECT_ENV" >> $GITHUB_ENV
          echo "Found project directory: $PROJECT_DIR"

      - name: Install Lighthouse CI and Dependencies
        run: |
          cd ${{ env.PROJECT_DIR }}
          npm install -g @lhci/cli
          npm install
          npm install puppeteer

      - name: Create .lighthouseci/urls.txt
        run: |
          cd ${{ env.PROJECT_DIR }}
          mkdir -p .lighthouseci
          echo "http://localhost:3000" > .lighthouseci/urls.txt

      - name: Create Lighthouse CI Config with appIsReady check
        run: |
          cd ${{ env.PROJECT_DIR }}
          URLS=$(cat .lighthouseci/urls.txt | jq -R -s -c 'split("\n") | map(select(. != ""))')
          cat > .lighthouserc.${{ matrix.formfactor.name }}.json <<EOF
          {
            "ci": {
              "collect": {
                "startServerCommand": "export NODE_OPTIONS=--openssl-legacy-provider && PORT=3000 npm start",
                "url": $URLS,
                "waitForExpression": "window.appIsReady === true",
                "numberOfRuns": 1,
                "settings": {
                  "preset": "${{ matrix.formfactor.preset }}",
                  "emulatedFormFactor": "${{ matrix.formfactor.name }}",
                  "screenEmulation": {
                    "mobile": false,
                    "width": ${{ matrix.formfactor.width }},
                    "height": ${{ matrix.formfactor.height }},
                    "deviceScaleFactor": 1,
                    "disabled": false
                  },
                  "throttlingMethod": "simulate"
                }
              },
              "upload": {
                "target": "filesystem",
                "outputDir": "./lhci-report-${{ matrix.formfactor.name }}"
              }
            }
          }
          EOF

      - name: Run Lighthouse CI Audit
        run: |
          cd ${{ env.PROJECT_DIR }}
          lhci autorun --config .lighthouserc.${{ matrix.formfactor.name }}.json

      - name: Upload LHCI Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lhci-report-${{ matrix.formfactor.name }}
          path: ${{ env.PROJECT_DIR }}/lhci-report-${{ matrix.formfactor.name }}
